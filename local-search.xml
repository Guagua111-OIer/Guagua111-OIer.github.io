<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/08/hello-world/"/>
    <url>/2025/08/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>P1001 A+B Problem C++ 题解</title>
    <link href="/2025/08/08/P1001-A-B-Problem-C-%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/08/P1001-A-B-Problem-C-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="A-B-Problem-c-题解"><a href="#A-B-Problem-c-题解" class="headerlink" title="A+B Problem c++题解"></a>A+B Problem c++题解</h1><p><a href="https://www.luogu.com.cn/problem/P1001">这道题</a>主要考察对编程语言的了解。实际上不用学太多知识，只要是有一个良好的编程环境，加上一点点语法知识，这道题就能AC（通过）。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>先说说这道题的思路</strong></p><p>题目意思就是说让我们写一个程序，计算两数相加的和并输出。所以我们要用到输入输出的东西：cin和cout。其用法为:</p><ul><li>输入一个整数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin &gt;&gt; a;<br></code></pre></td></tr></table></figure><p>这里的 $a$ 是我们输入进来的变量（当然这里假设 $a$ 已经被定义过）。</p><ul><li>输出一个整数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; a;<br></code></pre></td></tr></table></figure><p>同理，这里的 $a$ 代指我们输出的数。</p><p>读到这里，你一定读懂cin和cout是怎么用的了吧。那么，这些好用的功能在哪里呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;iostream&gt;<br></code></pre></td></tr></table></figure><p>对了！我们平时写源代码时，用的就是这个库！</p><p>那么，我们就得到了前两行代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>这里第二行代码是声明空间std，如果不加的话，写长代码时会很麻烦，所以一般都要加。</p><p><strong>这两行代码非常重要，一般代码都需要，所以请记下来</strong></p><p>那么，还需要什么呢？</p><p>对了，就是main主函数。</p><p>之所以叫主函数，是因为它是程序的核心，没了它，程序就完蛋了。正是因此，编译器在执行代码时，会优先执行它里面的东西，执行完之后程序就结束了。主函数有三个特点：</p><ul><li>名字必须是main</li><li>类型一般都为int</li><li>返回值必须为 $0$</li></ul><p>名字必须为main，是因为不是main，编译器就会以为是其他的函数，就会因为找不到main函数而报错。<strong>至于返回值必须为 $0$，是因为返回 $0$ 表示程序正常结束，返回其他值编译器会认为程序出现了异常。虽然不会报错，但这样的代码会出现名叫“运行时错误”的错误，简称RE，在洛谷是得不了分的。</strong> 至于返回语句return，我就不给大家细讲了，感兴趣的可以<a href="https://blog.csdn.net/mlyjqx/article/details/61621977">自行研究</a>。</p><p>所以，我们就得到了程序的框架。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就是主要内容了。首先要输入两个数，那我们就先定义两个数 $a, b$。再输入这两个数就可以了。于是，我们就得到了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br></code></pre></td></tr></table></figure><p>这里输入多个整数可以用上面这种方法，假设要输入三个整数 $a, b, c$，就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br></code></pre></td></tr></table></figure><p>当然，输出多个也一样，我就不细讲了。</p><p>有人也许会问：要不要用long long这种64位存储类型？其实题目已经说了：</p><p>$a, b \le 10 ^ 9$。</p><p>这个数目其实用int类型就可以存下。<strong>当然，有的题目非常狡猾，没告诉你要用long long，其实不用long long就错了。所以这种思考习惯其实是很好的。</strong></p><p>那么，回归正题，我们已经完成了输入，接下来就是输出了。我们要输出的值是 $a + b$，那么，我们就得到了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; a + b;<br></code></pre></td></tr></table></figure><p>有人就有要问了，cout可以输出一个变量，这种表达式可以吗？实际上，cout除了输出变量之外，还可以输出值或表达式。这里的 $a + b$ 就是一个表达式。<strong>但要注意的是，cin并不能做到这一点，cin只能输入一个变量，不能输入值或表达式。</strong></p><p>这样，我们的代码就写完了。接下来给大家展示我们写完的代码</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>展示一下最终的代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
