<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Quine —— 能够自我繁殖的程序生命</title>
    <link href="/2025/08/08/Quine-%E2%80%94%E2%80%94-%E8%83%BD%E5%A4%9F%E8%87%AA%E6%88%91%E7%B9%81%E6%AE%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%94%9F%E5%91%BD/"/>
    <url>/2025/08/08/Quine-%E2%80%94%E2%80%94-%E8%83%BD%E5%A4%9F%E8%87%AA%E6%88%91%E7%B9%81%E6%AE%96%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%94%9F%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="0.8em"><mtext mathvariant="monospace">警告：切勿将本文章任何内容用于任何非法用途。</mtext></mstyle><mspace linebreak="newline"></mspace><mstyle mathcolor="red"><mstyle mathsize="0.8em"><mtext mathvariant="monospace">包含但不限于制作病毒，抄袭。</mtext></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\texttt{\footnotesize{警告：切勿将本文章任何内容用于任何非法用途。}}\\\color{red}\texttt{\footnotesize{包含但不限于制作病毒，抄袭。}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4889em;"></span><span class="mord text" style="color:red;"><span class="mord sizing reset-size6 size4" style="color:red;"><span class="mord texttt cjk_fallback" style="color:red;">警告：切勿将本文章任何内容用于任何非法用途。</span></span></span></span><span class="mspace newline" style="color:red;"></span><span class="base"><span class="strut" style="height:0.4889em;"></span><span class="mord text" style="color:red;"><span class="mord sizing reset-size6 size4" style="color:red;"><span class="mord texttt cjk_fallback" style="color:red;">包含但不限于制作病毒，抄袭。</span></span></span></span></span></span></p><p>声明：本文原创</p><p>你是否有过一个念头：“我要写一个能输出自己的程序！”<br>目的呢，可能是想要挑战、娱乐、炫耀。<br>但是，经过七七四十九般尝试，你依然没有研究出来这种程序。<br>不过，看完这篇文章，你就会 Get 到以前让你不敢相信的代码！<br>那就让我们尝试写一写吧！</p><p>提示：我是 <code>C++</code> 党，所以本文的所有代码都是用 <code>C++</code> 编写的。不过，尽管你不会 <code>C++</code>，只要读懂了思路，稍加变通，我相信你也一定能成功！</p><h1>Part 1 一次大胆的尝试</h1><p>首先，凡是代码都有框架：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.5em"><mtext mathvariant="monospace">注：这里省略了主函数以外的部分与主函数</mtext></mstyle></mrow><annotation encoding="application/x-tex">\texttt{\tiny{注：这里省略了主函数以外的部分与主函数}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3056em;"></span><span class="mord text"><span class="mord sizing reset-size6 size1"><span class="mord texttt cjk_fallback">注：这里省略了主函数以外的部分与主函数</span></span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;...&quot;</span>;<br></code></pre></td></tr></table></figure><p>然后，我们要将代码里的 <code>...</code> 替换成整个代码，注意特殊字符的转义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;cout &lt;&lt; \&quot;...\&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>emmm，又出现了一个 <code>...</code>，按照规矩，我们应该把它也替换成整个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;cout &lt;&lt; \&quot;cout &lt;&lt; \&quot;cout &lt;&lt; \&quot;...\&quot;\&quot;;\&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>emmm，还有一个 <code>...</code>，所以继续替换……<br>等等，你有没有发现什么不对劲的地方？</p><h2 id="Part-2-无法打破的-“造物论”">Part 2 无法打破的 “造物论”</h2><p>看着上方越来越长的代码，你不禁陷入深思。<br>照这么写，我的代码要写 INF 列啊！！！QWQ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.5em"><mtext mathvariant="monospace">注:INF是无穷大的意思。</mtext></mstyle></mrow><annotation encoding="application/x-tex">\texttt{\tiny{注:INF是无穷大的意思。}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3056em;"></span><span class="mord text"><span class="mord sizing reset-size6 size1"><span class="mord texttt cjk_fallback">注</span><span class="mord texttt">:INF</span><span class="mord texttt cjk_fallback">是无穷大的意思。</span></span></span></span></span></span><br>我们貌似发现了一个无法打破的理论，我们暂且称之为 “造物论”。该理论指出，任何一种物质，都只能由比其跟高级的物质造出。例如，汽车厂造出汽车，人类造出玩具。（我们的程序也可以由 <code>Windows</code> 强大的文件读写特性直接输出代码文件自己，但是过程中利用了 <code>Windows</code> 这种比代码复杂 10000 倍的东西，并没有违背定理。）</p><p>所以貌似 “造物论” 开始阻拦我们的实现了。<br>但是，“造物论” 真的就无法打破吗？<br>答案是否定的。</p><h2 id="Part-3-自我繁殖的奥秘">Part 3 自我繁殖的奥秘</h2><p>微生物的繁殖，人类繁衍后代，植物授粉，无一不在做 “造物论” 的反例！大自然，就是我们成功的一丝希望！</p><p>举个例子，乌龟的繁殖。<s>（真实画面请自行脑补，以下仅作参考）</s></p><p><img src="bilibili:BV1jWFTe6EiT" alt=""></p><p>程序，也可以用类似的方法进行繁殖。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">char</span> s[]=<span class="hljs-string">&quot;#include&lt;cstdio&gt;%cchar s[]=%c%s%c;%cint main()&#123;printf(s,10,34,s,34);&#125;&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">printf</span>(s,<span class="hljs-number">10</span>,<span class="hljs-number">34</span>,s,<span class="hljs-number">34</span>,<span class="hljs-number">10</span>);&#125;<br></code></pre></td></tr></table></figure><p>我们可以先输出代码其他部分，将会重复的那一行单独存下来，通过 <code>printf()</code> 的特性将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> 的重复部分用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> 替代。</p><p><code>%c</code> 是指代特殊字符。因为特殊字符转义是包含两个字符，所以为了方便，我们用 <code>%c</code> 表示特殊字符。</p><p><code>%s</code> 是字符串重复的位置，我们通过 <code>printf()</code> 将重复的部分替换。</p><p>以上代码看上去码风很丑，不过这是为了使最后代码简洁。因为一旦加长代码，就会使 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> 的长度增加。</p><p>通过这种 “先将重复部分存下来不管，输出其他部分，最后在其他语句中将重复部分替换” 的思路，我们可以衍生出很多很多代码。比如这个：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">把括号里的内容抄一遍，再带括号抄一遍，最后加个句号（把括号里的内容抄一遍，再带括号抄一遍，最后加个句号）。<br></code></pre></td></tr></table></figure><p><s>自然语言</s></p><p>大家可以发现，按照这段话做一遍后，你会得到一个一模一样的段落！</p><p>还有很多 Quine 程序的实现。大家可以查阅资料。能输出自己的程序，就这样被我们创造出来了！是不是不敢相信？到此，我们大功告成！</p><h1><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">End</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/08/hello-world/"/>
    <url>/2025/08/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>P1001 A+B Problem C++ 题解</title>
    <link href="/2025/08/08/P1001-A-B-Problem-C-%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/08/P1001-A-B-Problem-C-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>A+B Problem c++题解</h1><p><a href="https://www.luogu.com.cn/problem/P1001">这道题</a>主要考察对编程语言的了解。实际上不用学太多知识，只要是有一个良好的编程环境，加上一点点语法知识，这道题就能AC（通过）。</p><h2 id="思路">思路</h2><p><strong>先说说这道题的思路</strong></p><p>题目意思就是说让我们写一个程序，计算两数相加的和并输出。所以我们要用到输入输出的东西：cin和cout。其用法为:</p><ul><li>输入一个整数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin &gt;&gt; a;<br></code></pre></td></tr></table></figure><p>这里的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 是我们输入进来的变量（当然这里假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 已经被定义过）。</p><ul><li>输出一个整数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; a;<br></code></pre></td></tr></table></figure><p>同理，这里的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 代指我们输出的数。</p><p>读到这里，你一定读懂cin和cout是怎么用的了吧。那么，这些好用的功能在哪里呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;iostream&gt;<br></code></pre></td></tr></table></figure><p>对了！我们平时写源代码时，用的就是这个库！</p><p>那么，我们就得到了前两行代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>这里第二行代码是声明空间std，如果不加的话，写长代码时会很麻烦，所以一般都要加。</p><p><strong>这两行代码非常重要，一般代码都需要，所以请记下来</strong></p><p>那么，还需要什么呢？</p><p>对了，就是main主函数。</p><p>之所以叫主函数，是因为它是程序的核心，没了它，程序就完蛋了。正是因此，编译器在执行代码时，会优先执行它里面的东西，执行完之后程序就结束了。主函数有三个特点：</p><ul><li>名字必须是main</li><li>类型一般都为int</li><li>返回值必须为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li></ul><p>名字必须为main，是因为不是main，编译器就会以为是其他的函数，就会因为找不到main函数而报错。<strong>至于返回值必须为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，是因为返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 表示程序正常结束，返回其他值编译器会认为程序出现了异常。虽然不会报错，但这样的代码会出现名叫“运行时错误”的错误，简称RE，在洛谷是得不了分的。</strong> 至于返回语句return，我就不给大家细讲了，感兴趣的可以<a href="https://blog.csdn.net/mlyjqx/article/details/61621977">自行研究</a>。</p><p>所以，我们就得到了程序的框架。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就是主要内容了。首先要输入两个数，那我们就先定义两个数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a, b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span></span></span></span>。再输入这两个数就可以了。于是，我们就得到了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br></code></pre></td></tr></table></figure><p>这里输入多个整数可以用上面这种方法，假设要输入三个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a, b, c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span></span></span></span>，就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br></code></pre></td></tr></table></figure><p>当然，输出多个也一样，我就不细讲了。</p><p>有人也许会问：要不要用long long这种64位存储类型？其实题目已经说了：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>≤</mo><msup><mn>10</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">a, b \le 10 ^ 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>。</p><p>这个数目其实用int类型就可以存下。<strong>当然，有的题目非常狡猾，没告诉你要用long long，其实不用long long就错了。所以这种思考习惯其实是很好的。</strong></p><p>那么，回归正题，我们已经完成了输入，接下来就是输出了。我们要输出的值是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>，那么，我们就得到了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; a + b;<br></code></pre></td></tr></table></figure><p>有人就有要问了，cout可以输出一个变量，这种表达式可以吗？实际上，cout除了输出变量之外，还可以输出值或表达式。这里的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 就是一个表达式。<strong>但要注意的是，cin并不能做到这一点，cin只能输入一个变量，不能输入值或表达式。</strong></p><p>这样，我们的代码就写完了。接下来给大家展示我们写完的代码</p><h1>代码</h1><p><strong>展示一下最终的代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
